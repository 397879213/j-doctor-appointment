package jdoctor.appointment.view.docuser;

import java.util.ArrayList;
import java.util.List;
import jdoctor.appointment.controller.DoctorController;
import jdoctor.appointment.controller.SecretaryController;
import jdoctor.appointment.exception.ControllerException;
import jdoctor.appointment.exception.VisionException;
import jdoctor.appointment.model.Doctor;
import jdoctor.appointment.model.Secretary;
import jdoctor.appointment.util.GuiUtils;
import lombok.Setter;

public class RegisterPanel extends javax.swing.JPanel {
    @Setter
    private MainLoginPanel main;
    
    private DoctorController doctorController;
    private SecretaryController secretaryController;
    /**
     * Creates new form LoginFormPanel
     */
    public RegisterPanel() {
        initComponents();
        errorPanel.setVisible(false);
        personFormPanel.setErrorPanel(errorPanel);
        userFormPanel.setErrorPanel(errorPanel);
        userFunctionFormPanel.setErrorPanel(errorPanel);
    }
    
    public void cleanForm() {
        personFormPanel.cleanForm();
        userFormPanel.cleanForm();
        userFunctionFormPanel.cleanForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblHeader = new javax.swing.JLabel();
        errorPanel = new jdoctor.appointment.view.error.ErrorPanel();
        personFormPanel = new jdoctor.appointment.view.form.PersonFormPanel();
        jSeparator1 = new javax.swing.JSeparator();
        actionsPanel = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        userFormPanel = new jdoctor.appointment.view.form.UserFormPanel();
        userFunctionFormPanel = new jdoctor.appointment.view.form.UserFunctionFormPanel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        lblHeader.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblHeader.setText("REGISTRO USUARIO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        add(lblHeader, gridBagConstraints);

        javax.swing.GroupLayout errorPanelLayout = new javax.swing.GroupLayout(errorPanel);
        errorPanel.setLayout(errorPanelLayout);
        errorPanelLayout.setHorizontalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        errorPanelLayout.setVerticalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(errorPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(personFormPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        add(jSeparator1, gridBagConstraints);

        actionsPanel.setLayout(new java.awt.GridLayout(1, 0, 15, 0));

        btnBack.setText("Voltar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        actionsPanel.add(btnBack);

        btnRegister.setText("Registrar");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        actionsPanel.add(btnRegister);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(actionsPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        add(jSeparator2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(userFormPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(userFunctionFormPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        main.switchLogin();
    }//GEN-LAST:event_btnBackActionPerformed

    
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
    }//GEN-LAST:event_formComponentShown

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        errorPanel.clean();
        
        boolean isDoctor = false;
        boolean isSecretary = false;
        
        if (!userFunctionFormPanel.isDoctor() &&
                !userFunctionFormPanel.isSecretary()) {
            errorPanel.addError("Você deve escolher uma função.");
        }
            
        if (userFunctionFormPanel.isDoctor()) {
            try {
                Doctor doctor = new Doctor();
                userFormPanel.formToObject(doctor);
                personFormPanel.formToObject(doctor);
                userFunctionFormPanel.formToObject(doctor);
                
                doctorController = new DoctorController();
                doctorController.save(doctor);
                GuiUtils.showConfirmOkDialog("Doutor(a) registrado com sucesso! :)", this);
                main.switchLogin();
            } catch (ControllerException | VisionException e) {
                errorPanel.addError(e.getMessage());
            }
        } 

        if (userFunctionFormPanel.isSecretary()) {
            try {
                Secretary secretary = new Secretary();
                userFormPanel.formToObject(secretary);
                personFormPanel.formToObject(secretary);
                userFunctionFormPanel.formToObject(secretary);
                
                secretaryController = new SecretaryController();
                secretaryController.save(secretary);
                GuiUtils.showConfirmOkDialog("Secretario(a) registrado com sucesso! :)", this);
                main.switchLogin();
            } catch (ControllerException | VisionException e) {
                errorPanel.addError(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnRegisterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRegister;
    private jdoctor.appointment.view.error.ErrorPanel errorPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblHeader;
    private jdoctor.appointment.view.form.PersonFormPanel personFormPanel;
    private jdoctor.appointment.view.form.UserFormPanel userFormPanel;
    private jdoctor.appointment.view.form.UserFunctionFormPanel userFunctionFormPanel;
    // End of variables declaration//GEN-END:variables
}
